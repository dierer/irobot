<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="z6qPxuQzF.ae?#N#xe}?" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="jz_tK`+SD4U|n6)ShU*9" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace irobot {" line1="    export enum ScreenDirection {" line2="        //% blockId=&quot;Vertical&quot; block=&quot;竖屏&quot;" line3="        Vertical," line4="        //% blockId=&quot;Horizontal&quot; block=&quot;横屏&quot;" line5="        Horizontal" line6="    }" line7="" line8="    export enum StringSize {" line9="        //% blockId=&quot;SmallSize&quot; block=&quot;16*16&quot;" line10="        SmallSize," line11="        //% blockId=&quot;MediumSize&quot; block=&quot;24*24&quot;" line12="        MediumSize," line13="        //% blockId=&quot;LargeSize&quot; block=&quot;32*32&quot;" line14="        LargeSize" line15="    }" line16="" line17="    export enum Pics {" line18="        //% blockId=&quot;UpPic&quot; block=&quot;向上图片&quot;" line19="        UpPic," line20="        //% blockId=&quot;RightPic&quot; block=&quot;向右图片&quot;" line21="        RightPic," line22="        //% blockId=&quot;DownPic&quot; block=&quot;向下图片&quot;" line23="        DownPic," line24="        //% blockId=&quot;LeftPic&quot; block=&quot;向左图片&quot;" line25="        LeftPic," line26="        //% blockId=&quot;RightUpPic&quot; block=&quot;右上图片&quot;" line27="        RightUpPic," line28="        //% blockId=&quot;RightDownPic&quot; block=&quot;右下图片&quot;" line29="        RightDownPic," line30="        //% blockId=&quot;LeftUpPic&quot; block=&quot;左上图片&quot;" line31="        LeftUpPic," line32="        //% blockId=&quot;LeftDownPic&quot; block=&quot;左下图片&quot;" line33="        LeftDownPic," line34="        //% blockId=&quot;WifiPic&quot; block=&quot;WIFI图片&quot;" line35="        WifiPic," line36="        //% blockId=&quot;LightingPic&quot; block=&quot;打雷图片&quot;" line37="        LightingPic," line38="        //% blockId=&quot;CottaPic&quot; block=&quot;短袖图片&quot;" line39="        CottaPic," line40="        //% blockId=&quot;WindPic&quot; block=&quot;风图片&quot;" line41="        WindPic," line42="        //% blockId=&quot;DistancePic&quot; block=&quot;距离图片&quot;" line43="        DistancePic," line44="        //% blockId=&quot;BluetoothPic&quot; block=&quot;蓝牙图片&quot;" line45="        BluetoothPic," line46="        //% blockId=&quot;GetUpPic&quot; block=&quot;起床图片&quot;" line47="        GetUpPic," line48="        //% blockId=&quot;SunnyPic&quot; block=&quot;晴天图片&quot;" line49="        SunnyPic," line50="        //% blockId=&quot;SoundPic&quot; block=&quot;声音图片&quot;" line51="        SoundPic," line52="        //% blockId=&quot;HumidityPic&quot; block=&quot;湿度图片&quot;" line53="        HumidityPic," line54="        //% blockId=&quot;SleepPic&quot; block=&quot;睡觉图片&quot;" line55="        SleepPic," line56="        //% blockId=&quot;WechatPic&quot; block=&quot;微信图片&quot;" line57="        WechatPic," line58="        //% blockId=&quot;TemperaturePic&quot; block=&quot;温度图片&quot;" line59="        TemperaturePic," line60="        //% blockId=&quot;SnowPic&quot; block=&quot;雪图片&quot;" line61="        SnowPic," line62="        //% blockId=&quot;NightPic&quot; block=&quot;夜间图片&quot;" line63="        NightPic," line64="        //% blockId=&quot;RainPic&quot; block=&quot;雨天图片&quot;" line65="        RainPic," line66="        //% blockId=&quot;TShirtPic&quot; block=&quot;长袖图片&quot;" line67="        TShirtPic" line68="    }" line69="" line70="    export enum Motor {" line71="        //% blockId=&quot;LeftUpMotor&quot; block=&quot;左前电机&quot;" line72="        LeftUpMotor," line73="        //% blockId=&quot;LeftDownMotor&quot; block=&quot;左后电机&quot;" line74="        LeftDownMotor," line75="        //% blockId=&quot;RightUpMotor&quot; block=&quot;右前电机&quot;" line76="        RightUpMotor," line77="        //% blockId=&quot;RightDownMotor&quot; block=&quot;右后电机&quot;" line78="        RightDownMotor" line79="    }" line80="" line81="    export enum PS2Button {" line82="        //% blockId=&quot;Left&quot; block=&quot;向左方向键&quot;" line83="        Left," line84="        //% blockId=&quot;Down&quot; block=&quot;向下方向键&quot;" line85="        Down," line86="        //% blockId=&quot;Right&quot; block=&quot;向右方向键&quot;" line87="        Right," line88="        //% blockId=&quot;Up&quot; block=&quot;向上方向键&quot;" line89="        Up," line90="        //% blockId=&quot;Start&quot; block=&quot;开始(Start)按键&quot;" line91="        Start," line92="        //% blockId=&quot;Analog_Left&quot; block=&quot;左侧摇杆按下&quot;" line93="        AnalogLeft," line94="        //% blockId=&quot;Analog_Right&quot; block=&quot;右侧摇杆按下&quot;" line95="        AnalogRight," line96="        //% blockId=&quot;Select&quot; block=&quot;选择(Select)按键&quot;" line97="        Select," line98="        //% blockId=&quot;Square&quot; block=&quot;正方形(□)按键&quot;" line99="        Square," line100="        //% blockId=&quot;Cross&quot; block=&quot;叉型(×)按键&quot;" line101="        Cross," line102="        //% blockId=&quot;Circle&quot; block=&quot;圆型(○)按键&quot;" line103="        Circle," line104="        //% blockId=&quot;Triangle&quot; block=&quot;三角形(△)按键&quot;" line105="        Triangle," line106="        //% blockId=&quot;R1&quot; block=&quot;R1按键&quot;" line107="        R1," line108="        //% blockId=&quot;L1&quot; block=&quot;L1按键&quot;" line109="        L1," line110="        //% blockId=&quot;R2&quot; block=&quot;R2按键&quot;" line111="        R2," line112="        //% blockId=&quot;L2&quot; block=&quot;L2按键&quot;" line113="        L2," line114="        //% blockId=&quot;Buttons&quot; block=&quot;按键(空缺)&quot;" line115="        Buttons," line116="        //% blockId=&quot;RX&quot; block=&quot;右侧摇杆X的值&quot;" line117="        RX," line118="        //% blockId=&quot;RY&quot; block=&quot;右侧摇杆Y的值&quot;" line119="        RY," line120="        //% blockId=&quot;LX&quot; block=&quot;左侧摇杆x的值&quot;" line121="        LX," line122="        //% blockId=&quot;LY&quot; block=&quot;左侧摇杆Y的值&quot;" line123="        LY," line124="    };" line125="" line126="    // I2C address for sht20" line127="    const SHT20_ADDRESS = 0x40;" line128="    // register address for sht20" line129="    const SHT20_SOFT_RESET = 0xFE;" line130="    const SHT20_T_HOLD = 0xE3;" line131="    const SHT20_RH_HOLD = 0xE5;" line132="" line133="    // initialzie flag for sht20" line134="    let sht20Initialize = false;" line135="" line136="    // initialzie flag for lcd" line137="    let lcdInitialize = false;" line138="" line139="    // I2C address for pca9685" line140="    const PCA9685_ADDRESS = 0x40;" line141="    // register address for pca9685" line142="    const MODE1 = 0x00;" line143="    const MODE2 = 0x01;" line144="    const PRESCALE = 0xFE;" line145="    const LED0_ON_L = 0x06;" line146="" line147="    // initialzie flag for pca9685" line148="    let pca9685Initialize = false;" line149="" line150="    // initialize flag for ps2" line151="    let ps2Initialize = false;" line152="    let ps2Connect = false;" line153="    // response buffer for ps2" line154="    let respBuf = pins.createBuffer(6);" line155="" line156="    // write register through i2c" line157="    function i2cWriteReg(addr: number, reg: number, value: number): void {" line158="        let buf = pins.createBuffer(2);" line159="        buf[0] = reg;" line160="        buf[1] = value;" line161="        pins.i2cWriteBuffer(addr, buf);" line162="    }" line163="" line164="    // read register through i2c" line165="    function i2cReadReg(addr: number, reg: number): number {" line166="        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);" line167="        let value = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);" line168="        return value;" line169="    }" line170="" line171="    // init sht20" line172="    function initSht20(): void {" line173="        pins.i2cWriteNumber(SHT20_ADDRESS, SHT20_SOFT_RESET, NumberFormat.UInt8BE);" line174="        basic.pause(10);" line175="        sht20Initialize = true;" line176="    }" line177="" line178="    // read temperature from sht20" line179="    //% blockId=&quot;irobot_temperature&quot; block=&quot;温度测量值(℃)&quot;" line180="    //% weight=100" line181="    //% group=&quot;机器人传感&quot;" line182="    export function readTemerature(): number {" line183="        if (!sht20Initialize) {" line184="            initSht20();" line185="        }" line186="        pins.i2cWriteNumber(SHT20_ADDRESS, SHT20_T_HOLD, NumberFormat.UInt8BE);" line187="        basic.pause(90);" line188="        let data = pins.i2cReadNumber(SHT20_ADDRESS, NumberFormat.UInt16BE);" line189="        let temperature = data / 65536.0 * 175.72 - 46.85;" line190="        return temperature;" line191="    }" line192="" line193="    // read humidity from sht20" line194="    //% blockId=&quot;irobot_humidity&quot; block=&quot;湿度测量值(\\%)&quot;" line195="    //% weight=99" line196="    //% group=&quot;机器人传感&quot;" line197="    export function readHumidity(): number {" line198="        if (sht20Initialize == false) {" line199="            initSht20();" line200="        }" line201="        pins.i2cWriteNumber(SHT20_ADDRESS, SHT20_RH_HOLD, NumberFormat.UInt8BE);" line202="        basic.pause(30);" line203="        let data2 = pins.i2cReadNumber(SHT20_ADDRESS, NumberFormat.Int16BE);" line204="        let humidity = data2 / 65536.0 * 125.0 - 6.0;" line205="        return humidity;" line206="    }" line207="" line208="    // read distance from ultrasonic" line209="    //% blockId=&quot;irobot_distance&quot; block=&quot;超声波测距值(cm)&quot;" line210="    //% weight=98" line211="    //% group=&quot;机器人传感&quot;" line212="    export function sonar(): number {" line213="        let maxDistance = 500;" line214="        pins.setPull(DigitalPin.P1, PinPullMode.PullNone);" line215="        pins.digitalWritePin(DigitalPin.P1, 0);" line216="        control.waitMicros(2);" line217="        pins.digitalWritePin(DigitalPin.P1, 1);" line218="        control.waitMicros(10);" line219="        pins.digitalWritePin(DigitalPin.P1, 0);" line220="        const data3 = pins.pulseIn(DigitalPin.P2, PulseValue.High, maxDistance * 58);" line221="        return Math.idiv(data3, 58);" line222="    }" line223="" line224="    // init lcd" line225="    function initLCD(): void {" line226="        serial.redirect(SerialPin.P16, SerialPin.P12, BaudRate.BaudRate115200);" line227="        basic.pause(10);" line228="        lcdInitialize = true;" line229="    }" line230="" line231="    // clear screen use colour" line232="    //% blockId=&quot;irobot_clear_lcd&quot; block=&quot;清除屏幕: 颜色 %colour&quot;" line233="    //% weight=100" line234="    //% colour.min=0 colour.max=63" line235="    //% group=&quot;机器人屏幕&quot;" line236="    export function clearLCD(colour: number): void {" line237="        if (!lcdInitialize) {" line238="            initLCD();" line239="        }" line240="        serial.writeLine(&quot;CLR(&quot; + colour.toString() + &quot;);&quot;);" line241="        basic.pause(40);" line242="    }" line243="" line244="    // change screen direction" line245="    //% blockId=&quot;irobot_direction_lcd&quot; block=&quot;改变屏幕方向: 方向 %direction&quot;" line246="    //% weight=99" line247="    //% group=&quot;机器人屏幕&quot;" line248="    export function directionLCD(direction: ScreenDirection): void {" line249="        if (!lcdInitialize) {" line250="            initLCD();" line251="        }" line252="        let screenDir = &quot;0&quot;;" line253="        switch (direction) {" line254="            case ScreenDirection.Vertical:" line255="                screenDir = &quot;0&quot;;" line256="            case ScreenDirection.Horizontal:" line257="                screenDir = &quot;1&quot;;" line258="        }" line259="        serial.writeLine(&quot;DIR(&quot; + screenDir + &quot;);&quot;);" line260="        basic.pause(20);" line261="    }" line262="" line263="    // change screen bright" line264="    //% blockId=&quot;irobot_bright_lcd&quot; block=&quot;改变屏幕亮度: 亮度 %brightness&quot;" line265="    //% weight=98" line266="    //% brightness.min=0 brightness.max=255" line267="    //% group=&quot;机器人屏幕&quot;" line268="    export function brightLCD(brightness: number): void {" line269="        if (!lcdInitialize) {" line270="            initLCD();" line271="        }" line272="        serial.writeLine(&quot;BL(&quot; + brightness.toString() + &quot;);&quot;);" line273="        basic.pause(20);" line274="    }" line275="" line276="    // change screen background colour" line277="    //% blockId=&quot;irobot_backround_lcd&quot; block=&quot;改变屏幕背景色: 颜色 %colour&quot;" line278="    //% weight=97" line279="    //% colour.min=0 colour.max=63" line280="    //% group=&quot;机器人屏幕&quot;" line281="    export function backgroundLCD(colour: number): void {" line282="        if (!lcdInitialize) {" line283="            initLCD();" line284="        }" line285="        serial.writeLine(&quot;SBC(&quot; + colour.toString() + &quot;);&quot;);" line286="        basic.pause(15);" line287="    }" line288="" line289="    // draw point on screen" line290="    //% blockId=&quot;irobot_point_lcd&quot; block=&quot;绘制单点: x %px|y %py|颜色 %colour&quot;" line291="    //% weight=96" line292="    //% colour.min=0 colour.max=63" line293="    //% group=&quot;机器人屏幕&quot;" line294="    export function pointLCD(x: number, y: number, colour: number): void {" line295="        if (!lcdInitialize) {" line296="            initLCD();" line297="        }" line298="        serial.writeLine(&quot;PS(&quot; + x.toString() + &quot;,&quot; + y.toString() + &quot;,&quot; + colour.toString() + &quot;);&quot;);" line299="        basic.pause(25);" line300="    }" line301="" line302="    // draw line on screen" line303="    //% blockId=&quot;irobot_line_lcd&quot; block=&quot;绘制线条: xstart %xstart|ystart %ystart|xend %xend|yend %yend|颜色 %colour&quot;" line304="    //% weight=95" line305="    //% colour.min=0 colour.max=63" line306="    //% group=&quot;机器人屏幕&quot;" line307="    export function lineLCD(xstart: number, ystart: number, xend: number, yend: number, colour: number): void {" line308="        if (!lcdInitialize) {" line309="            initLCD();" line310="        }" line311="        serial.writeLine(&quot;PL(&quot; + xstart.toString() + &quot;,&quot; + ystart.toString() + &quot;,&quot;" line312="            + xend.toString() + &quot;,&quot; + yend.toString() + &quot;,&quot; + colour.toString() + &quot;);&quot;);" line313="        basic.pause(30);" line314="    }" line315="" line316="    // draw box on screen" line317="    //% blockId=&quot;irobot_box_lcd&quot; block=&quot;绘制矩形: xstart %xstart|ystart %ystart|xend %xend|yend %yend|颜色 %colour|填充 %brush&quot;" line318="    //% weight=94" line319="    //% colour.min=0 colour.max=63" line320="    //% group=&quot;机器人屏幕&quot;" line321="    export function boxLCD(xstart: number, ystart: number, xend: number, yend: number, colour: number, brush: boolean): void {" line322="        if (!lcdInitialize) {" line323="            initLCD();" line324="        }" line325="        if (!brush) {" line326="            serial.writeLine(&quot;BOX(&quot; + xstart.toString() + &quot;,&quot; + ystart.toString() + &quot;,&quot;" line327="                + xend.toString() + &quot;,&quot; + yend.toString() + &quot;,&quot; + colour.toString() + &quot;);&quot;);" line328="        } else {" line329="            serial.writeLine(&quot;BOXF(&quot; + xstart.toString() + &quot;,&quot; + ystart.toString() + &quot;,&quot;" line330="                + xend.toString() + &quot;,&quot; + yend.toString() + &quot;,&quot; + colour.toString() + &quot;);&quot;);" line331="        }" line332="        basic.pause(35);" line333="    }" line334="" line335="    // draw circle on screen" line336="    //% blockId=&quot;irobot_circle_lcd&quot; block=&quot;绘制圆形: x %px|y %py|radius %r|颜色 %colour|填充 %brush&quot;" line337="    //% weight=93" line338="    //% colour.min=0 colour.max=63" line339="    //% group=&quot;机器人屏幕&quot;" line340="    export function circleLCD(x: number, y: number, r: number, colour: number, brush: boolean): void {" line341="        if (!lcdInitialize) {" line342="            initLCD();" line343="        }" line344="        if (!brush) {" line345="            serial.writeLine(&quot;CIR(&quot; + x.toString() + &quot;,&quot; + y.toString() + &quot;,&quot;" line346="                + r.toString() + &quot;,&quot; + colour.toString() + &quot;);&quot;);" line347="        } else {" line348="            serial.writeLine(&quot;CIRF(&quot; + x.toString() + &quot;,&quot; + y.toString() + &quot;,&quot;" line349="                + r.toString() + &quot;,&quot; + colour.toString() + &quot;);&quot;);" line350="        }" line351="        basic.pause(35);" line352="    }" line353="" line354="    // draw string on screen" line355="    //% blockId=&quot;irobot_string_lcd&quot; block=&quot;显示字符: x %x|y %y|str %str|颜色 %colour|大小 %size|透明 %lucency&quot;" line356="    //% weight=92" line357="    //% colour.min=0 colour.max=63" line358="    //% group=&quot;机器人屏幕&quot;" line359="    export function stringLCD(x: number, y: number, str: string, colour: number, size: StringSize, lucency: boolean): void {" line360="        if (!lcdInitialize) {" line361="            initLCD();" line362="        }" line363="        if (size == StringSize.SmallSize) {" line364="            if (lucency) {" line365="                serial.writeLine(&quot;DC16(&quot; + x.toString() + &quot;,&quot; + y.toString() + &quot;,'&quot;" line366="                    + str + &quot;',&quot; + colour.toString() + &quot;,&quot; + &quot;);&quot;);" line367="            } else {" line368="                serial.writeLine(&quot;DCV16(&quot; + x.toString() + &quot;,&quot; + y.toString() + &quot;,'&quot;" line369="                    + str + &quot;',&quot; + colour.toString() + &quot;,&quot; + &quot;);&quot;);" line370="            }" line371="            basic.pause(35);" line372="        } else if (size == StringSize.MediumSize) {" line373="            if (!lucency) {" line374="                serial.writeLine(&quot;DC24(&quot; + x.toString() + &quot;,&quot; + y.toString() + &quot;,'&quot;" line375="                    + str + &quot;',&quot; + colour.toString() + &quot;,&quot; + &quot;);&quot;);" line376="            } else {" line377="                serial.writeLine(&quot;DCV24(&quot; + x.toString() + &quot;,&quot; + y.toString() + &quot;,'&quot;" line378="                    + str + &quot;',&quot; + colour.toString() + &quot;,&quot; + &quot;);&quot;);" line379="            }" line380="            basic.pause(40);" line381="        } else if (size == StringSize.LargeSize) {" line382="            if (!lucency) {" line383="                serial.writeLine(&quot;DC32(&quot; + x.toString() + &quot;,&quot; + y.toString() + &quot;,'&quot;" line384="                    + str + &quot;',&quot; + colour.toString() + &quot;,&quot; + &quot;);&quot;);" line385="            } else {" line386="                serial.writeLine(&quot;DCV32(&quot; + x.toString() + &quot;,&quot; + y.toString() + &quot;,'&quot;" line387="                    + str + &quot;',&quot; + colour.toString() + &quot;,&quot; + &quot;);&quot;);" line388="            }" line389="            basic.pause(50);" line390="        }" line391="    }" line392="" line393="    // draw pic on screen" line394="    //% blockId=&quot;irobot_pic_lcd&quot; block=&quot;显示图片: x %x|y %y|pic %Pics|透明: %lucency&quot;" line395="    //% weight=91" line396="    //% group=&quot;机器人屏幕&quot;" line397="    export function picLCD(x: number, y: number, pic: Pics, lucency: boolean): void {" line398="        if (!lcdInitialize) {" line399="            initLCD();" line400="        }" line401="        let picAddr = &quot;&quot;;" line402="        switch (pic) {" line403="            case Pics.UpPic:" line404="                picAddr = &quot;2097152&quot;;" line405="                break;" line406="            case Pics.RightPic:" line407="                picAddr = &quot;2099200&quot;;" line408="                break;" line409="            case Pics.DownPic:" line410="                picAddr = &quot;2101248&quot;;" line411="                break;" line412="            case Pics.LeftPic:" line413="                picAddr = &quot;2103296&quot;;" line414="                break;" line415="            case Pics.RightUpPic:" line416="                picAddr = &quot;2105344&quot;;" line417="                break;" line418="            case Pics.RightDownPic:" line419="                picAddr = &quot;2107392&quot;;" line420="                break;" line421="            case Pics.LeftUpPic:" line422="                picAddr = &quot;2109440&quot;;" line423="                break;" line424="            case Pics.LeftDownPic:" line425="                picAddr = &quot;2111488&quot;;" line426="            case Pics.WifiPic:" line427="                picAddr = &quot;2113536&quot;;" line428="                break;" line429="            case Pics.LightingPic:" line430="                picAddr = &quot;2115584&quot;;" line431="                break;" line432="            case Pics.CottaPic:" line433="                picAddr = &quot;2117632&quot;;" line434="                break;" line435="            case Pics.WindPic:" line436="                picAddr = &quot;2119680&quot;;" line437="                break;" line438="            case Pics.DistancePic:" line439="                picAddr = &quot;2121728&quot;;" line440="                break;" line441="            case Pics.BluetoothPic:" line442="                picAddr = &quot;2123776&quot;;" line443="                break;" line444="            case Pics.GetUpPic:" line445="                picAddr = &quot;2125824&quot;;" line446="                break;" line447="            case Pics.SunnyPic:" line448="                picAddr = &quot;2127872&quot;;" line449="                break;" line450="            case Pics.SoundPic:" line451="                picAddr = &quot;2129920&quot;;" line452="                break;" line453="            case Pics.HumidityPic:" line454="                picAddr = &quot;2131968&quot;;" line455="                break;" line456="            case Pics.SleepPic:" line457="                picAddr = &quot;2134016&quot;;" line458="                break;" line459="            case Pics.WechatPic:" line460="                picAddr = &quot;2136064&quot;;" line461="                break;" line462="            case Pics.TemperaturePic:" line463="                picAddr = &quot;2138112&quot;;" line464="                break;" line465="            case Pics.SnowPic:" line466="                picAddr = &quot;2140160&quot;;" line467="                break;" line468="            case Pics.NightPic:" line469="                picAddr = &quot;2142208&quot;;" line470="                break;" line471="            case Pics.RainPic:" line472="                picAddr = &quot;2144256&quot;;" line473="                break;" line474="            case Pics.TShirtPic:" line475="                picAddr = &quot;2146304&quot;;" line476="                break;" line477="        }" line478="        if (lucency) {" line479="            serial.writeLine(&quot;FSIMG(&quot; + picAddr + &quot;,&quot; + x.toString() + &quot;,&quot; + y.toString() + &quot;,32,32,1);&quot;);" line480="        } else {" line481="            serial.writeLine(&quot;FSIMG(&quot; + picAddr + &quot;,&quot; + x.toString() + &quot;,&quot; + y.toString() + &quot;,32,32,0);&quot;);" line482="        }" line483="    }" line484="" line485="    // set frequency for pca9685" line486="    function setFreqPca9685(freq: number): void {" line487="        let prescale = 25000000 / 4096;" line488="        prescale /= freq;" line489="        prescale -= 1;" line490="        let oldmode = i2cReadReg(PCA9685_ADDRESS, MODE1);" line491="        let newmode = (oldmode &amp; 0x7F) | 0x10;" line492="        i2cWriteReg(PCA9685_ADDRESS, MODE1, newmode);" line493="        i2cWriteReg(PCA9685_ADDRESS, PRESCALE, prescale);" line494="        i2cWriteReg(PCA9685_ADDRESS, MODE1, oldmode);" line495="        basic.pause(5);" line496="        i2cWriteReg(PCA9685_ADDRESS, MODE1, oldmode | 0xA1);" line497="    }" line498="" line499="    // set channel pwm for pca9685" line500="    function setPwmPca9685(channel: number, on: number, off: number): void {" line501="        if (channel &lt; 0 || channel &gt; 15) {" line502="            return;" line503="        }" line504="        let buf2 = pins.createBuffer(5);" line505="        buf2[0] = LED0_ON_L + 4 * channel;" line506="        buf2[1] = on &amp; 0xff;" line507="        buf2[2] = (on &gt;&gt; 8) &amp; 0xff;" line508="        buf2[3] = off &amp; 0xff;" line509="        buf2[4] = (off &gt;&gt; 8) &amp; 0xff;" line510="        pins.i2cWriteBuffer(PCA9685_ADDRESS, buf2);" line511="    }" line512="" line513="    // init pca9685" line514="    function initPca9685(): void {" line515="        i2cWriteReg(PCA9685_ADDRESS, MODE1, 0x20);" line516="        setFreqPca9685(50);" line517="        for (let idx = 0; idx &lt; 16; idx++) {" line518="            setPwmPca9685(idx, 0, 0);" line519="        }" line520="        pca9685Initialize = true;" line521="    }" line522="" line523="    // run motor for irobot" line524="    //% blockId=&quot;irobot_run_motor&quot; block=&quot;动作: 电机 %motor|速度 %speed&quot;" line525="    //% weight=100" line526="    //% speed.min=-100 speed.max=100" line527="    //% group=&quot;机器人运动&quot;" line528="    export function runMotor(motor: Motor, speed: number): void {" line529="        if (!pca9685Initialize) {" line530="            initPca9685();" line531="        }" line532="        // convert and limit speed" line533="        speed = speed * 40;" line534="        if (speed &gt;= 4095) {" line535="            speed = 4095;" line536="        }" line537="        if (speed &lt;= -4095) {" line538="            speed = -4095;" line539="        }" line540="        // run motor" line541="        switch (motor) {" line542="            case Motor.LeftUpMotor:" line543="                if (speed &gt;= 0) {" line544="                    setPwmPca9685(2, 4095, 0);" line545="                    setPwmPca9685(1, 0, 4095);" line546="                    setPwmPca9685(0, 0, speed);" line547="                } else {" line548="                    setPwmPca9685(2, 0, 4095);" line549="                    setPwmPca9685(1, 4095, 0);" line550="                    setPwmPca9685(0, 0, -1 * speed);" line551="                };" line552="                break;" line553="            case Motor.LeftDownMotor:" line554="                if (speed &gt;= 0) {" line555="                    setPwmPca9685(3, 4095, 0);" line556="                    setPwmPca9685(4, 0, 4095);" line557="                    setPwmPca9685(5, 0, speed);" line558="                } else {" line559="                    setPwmPca9685(3, 0, 4095);" line560="                    setPwmPca9685(4, 4095, 0);" line561="                    setPwmPca9685(5, 0, -1 * speed);" line562="                };" line563="                break;" line564="            case Motor.RightUpMotor:" line565="                if (speed &gt;= 0) {" line566="                    setPwmPca9685(6, 4095, 0);" line567="                    setPwmPca9685(7, 0, 4095);" line568="                    setPwmPca9685(8, 0, speed);" line569="                } else {" line570="                    setPwmPca9685(6, 0, 4095);" line571="                    setPwmPca9685(7, 4095, 0);" line572="                    setPwmPca9685(8, 0, -1 * speed);" line573="                };" line574="                break;" line575="            case Motor.RightDownMotor:" line576="                if (speed &gt;= 0) {" line577="                    setPwmPca9685(9, 4095, 0);" line578="                    setPwmPca9685(10, 0, 4095);" line579="                    setPwmPca9685(11, 0, speed);" line580="                } else {" line581="                    setPwmPca9685(9, 0, 4095);" line582="                    setPwmPca9685(10, 4095, 0);" line583="                    setPwmPca9685(11, 0, -1 * speed);" line584="                };" line585="                break;" line586="        }" line587="    }" line588="" line589="    // stop motor for irobot" line590="    //% blockId=&quot;irobot_stop_motor&quot; block=&quot;停止(全部)&quot;" line591="    //% weight=99" line592="    //% group=&quot;机器人运动&quot;" line593="    export function stopMotor(): void {" line594="        if (!pca9685Initialize) {" line595="            initPca9685();" line596="        }" line597="        // stop left up motor" line598="        setPwmPca9685(2, 0, 4095);" line599="        setPwmPca9685(1, 4095, 0);" line600="        setPwmPca9685(0, 0, 0);" line601="        // stop left down motor" line602="        setPwmPca9685(3, 0, 4095);" line603="        setPwmPca9685(4, 4095, 0);" line604="        setPwmPca9685(5, 0, 0);" line605="        // stop right up motor" line606="        setPwmPca9685(6, 0, 4095);" line607="        setPwmPca9685(7, 4095, 0);" line608="        setPwmPca9685(8, 0, 0);" line609="        // stop right down motor" line610="        setPwmPca9685(9, 0, 4095);" line611="        setPwmPca9685(10, 4095, 0);" line612="        setPwmPca9685(11, 0, 0);" line613="    }" line614="" line615="    // init ps2" line616="    function initPs2(): void {" line617="        pins.digitalWritePin(DigitalPin.P0, 1);" line618="        pins.spiPins(DigitalPin.P14, DigitalPin.P15, DigitalPin.P13);" line619="        pins.spiFormat(8, 3);" line620="        pins.spiFrequency(250000);" line621="        ps2Initialize = true;" line622="    }" line623="" line624="    // send command for ps2" line625="    function sendCommand(): Buffer {" line626="        let command = hex`804200000000000000`;" line627="        let cmdBuf = pins.createBuffer(command.length);" line628="        pins.digitalWritePin(DigitalPin.P0, 0);" line629="        for (let n = 0; n &lt; command.length; n++) {" line630="            cmdBuf[n] = pins.spiWrite(command[n]);" line631="        }" line632="        pins.digitalWritePin(DigitalPin.P0, 1);" line633="        return cmdBuf;" line634="    }" line635="" line636="    // 手柄按键轮询函数" line637="    function poll(): void {" line638="        if (!ps2Initialize) {" line639="            initPs2();" line640="        }" line641="        let cmdBuf2 = sendCommand();" line642="        if (cmdBuf2[2] != 0x5A) {" line643="            ps2Connect = false;" line644="        } else {" line645="            for (let o = 0; o &lt; 6; o++) {" line646="                respBuf[o] = cmdBuf2[o + 3];" line647="            }" line648="            ps2Connect = true;" line649="        }" line650="    }" line651="" line652="    // judge button from ps2" line653="    //% blockId=irobot_ps2 block=&quot;设置PS2手柄: %b|按下&quot;" line654="    //% weight=98" line655="    //% group=&quot;机器人运动&quot;" line656="    export function buttonPressed(button: PS2Button): number {" line657="        if (!ps2Connect) {" line658="            return 0x00;" line659="        }" line660="        switch (button) {" line661="            case PS2Button.Left:" line662="                return respBuf[0] &amp; 0x01 ? 0 : 1;" line663="            case PS2Button.Down:" line664="                return respBuf[0] &amp; 0x02 ? 0 : 1;" line665="            case PS2Button.Right:" line666="                return respBuf[0] &amp; 0x04 ? 0 : 1;" line667="            case PS2Button.Up:" line668="                return respBuf[0] &amp; 0x08 ? 0 : 1;" line669="            case PS2Button.Start:" line670="                return respBuf[0] &amp; 0x10 ? 0 : 1;" line671="            case PS2Button.AnalogLeft:" line672="                return respBuf[0] &amp; 0x20 ? 0 : 1;" line673="            case PS2Button.AnalogRight:" line674="                return respBuf[0] &amp; 0x40 ? 0 : 1;" line675="            case PS2Button.Select:" line676="                return respBuf[0] &amp; 0x80 ? 0 : 1;" line677="            case PS2Button.Square:" line678="                return respBuf[1] &amp; 0x01 ? 0 : 1;" line679="            case PS2Button.Cross:" line680="                return respBuf[1] &amp; 0x02 ? 0 : 1;" line681="            case PS2Button.Circle:" line682="                return respBuf[1] &amp; 0x04 ? 0 : 1;" line683="            case PS2Button.Triangle:" line684="                return respBuf[1] &amp; 0x08 ? 0 : 1;" line685="            case PS2Button.R1:" line686="                return respBuf[1] &amp; 0x10 ? 0 : 1;" line687="            case PS2Button.L1:" line688="                return respBuf[1] &amp; 0x20 ? 0 : 1;" line689="            case PS2Button.R2:" line690="                return respBuf[1] &amp; 0x40 ? 0 : 1;" line691="            case PS2Button.L2:" line692="                return respBuf[1] &amp; 0x80 ? 0 : 1;" line693="            case PS2Button.RX:" line694="                return respBuf[2] - 0x80;" line695="            case PS2Button.RY:" line696="                return respBuf[3] - 0x80;" line697="            case PS2Button.LX:" line698="                return respBuf[4] - 0x80;" line699="            case PS2Button.LY:" line700="                return respBuf[5] - 0x80;" line701="        }" line702="        return 0x00;" line703="    }" line704="" line705="    // forever run for ps2" line706="    basic.forever(function () {" line707="        poll();" line708="    })" line709="}" numlines="710"></mutation></block></statement></block></xml>